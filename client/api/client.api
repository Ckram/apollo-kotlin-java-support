public abstract interface class com/apollographql/java/client/ApolloCall : com/apollographql/apollo/api/MutableExecutionOptions {
	public abstract fun enqueue (Lcom/apollographql/java/client/ApolloCallback;)Lcom/apollographql/java/client/ApolloDisposable;
}

public abstract interface class com/apollographql/java/client/ApolloCallback {
	public abstract fun onResponse (Lcom/apollographql/apollo/api/ApolloResponse;)V
}

public class com/apollographql/java/client/ApolloClient : java/io/Closeable {
	public fun close ()V
	public fun execute (Lcom/apollographql/apollo/api/ApolloRequest;Lcom/apollographql/java/client/ApolloCallback;)Lcom/apollographql/java/client/ApolloDisposable;
	public fun getCustomScalarAdapters ()Lcom/apollographql/apollo/api/CustomScalarAdapters;
	public fun mutation (Lcom/apollographql/apollo/api/Mutation;)Lcom/apollographql/java/client/ApolloCall;
	public fun query (Lcom/apollographql/apollo/api/Query;)Lcom/apollographql/java/client/ApolloCall;
	public fun subscription (Lcom/apollographql/apollo/api/Subscription;)Lcom/apollographql/java/client/ApolloCall;
}

public class com/apollographql/java/client/ApolloClient$Builder : com/apollographql/apollo/api/MutableExecutionOptions {
	public fun <init> ()V
	public fun addCustomScalarAdapter (Lcom/apollographql/apollo/api/CustomScalarType;Lcom/apollographql/apollo/api/Adapter;)Lcom/apollographql/java/client/ApolloClient$Builder;
	public fun addExecutionContext (Lcom/apollographql/apollo/api/ExecutionContext;)Lcom/apollographql/java/client/ApolloClient$Builder;
	public synthetic fun addExecutionContext (Lcom/apollographql/apollo/api/ExecutionContext;)Ljava/lang/Object;
	public fun addHttpHeader (Ljava/lang/String;Ljava/lang/String;)Lcom/apollographql/java/client/ApolloClient$Builder;
	public synthetic fun addHttpHeader (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;
	public fun addHttpInterceptor (Lcom/apollographql/java/client/network/http/HttpInterceptor;)Lcom/apollographql/java/client/ApolloClient$Builder;
	public fun addHttpInterceptors (Ljava/util/List;)Lcom/apollographql/java/client/ApolloClient$Builder;
	public fun addInterceptor (Lcom/apollographql/java/client/interceptor/ApolloInterceptor;)Lcom/apollographql/java/client/ApolloClient$Builder;
	public fun addInterceptors (Ljava/util/List;)Lcom/apollographql/java/client/ApolloClient$Builder;
	public fun addWsHeader (Lcom/apollographql/apollo/api/http/HttpHeader;)Lcom/apollographql/java/client/ApolloClient$Builder;
	public fun addWsHeaders (Ljava/util/List;)Lcom/apollographql/java/client/ApolloClient$Builder;
	public fun autoPersistedQueries ()Lcom/apollographql/java/client/ApolloClient$Builder;
	public fun autoPersistedQueries (Lcom/apollographql/apollo/api/http/HttpMethod;)Lcom/apollographql/java/client/ApolloClient$Builder;
	public fun autoPersistedQueries (Lcom/apollographql/apollo/api/http/HttpMethod;Lcom/apollographql/apollo/api/http/HttpMethod;)Lcom/apollographql/java/client/ApolloClient$Builder;
	public fun autoPersistedQueries (Lcom/apollographql/apollo/api/http/HttpMethod;Lcom/apollographql/apollo/api/http/HttpMethod;Z)Lcom/apollographql/java/client/ApolloClient$Builder;
	public fun build ()Lcom/apollographql/java/client/ApolloClient;
	public fun callFactory (Lokhttp3/Call$Factory;)Lcom/apollographql/java/client/ApolloClient$Builder;
	public fun canBeBatched (Ljava/lang/Boolean;)Lcom/apollographql/java/client/ApolloClient$Builder;
	public synthetic fun canBeBatched (Ljava/lang/Boolean;)Ljava/lang/Object;
	public fun customScalarAdapters (Lcom/apollographql/apollo/api/CustomScalarAdapters;)Lcom/apollographql/java/client/ApolloClient$Builder;
	public fun dispatcher (Ljava/util/concurrent/Executor;)Lcom/apollographql/java/client/ApolloClient$Builder;
	public fun enableAutoPersistedQueries (Ljava/lang/Boolean;)Lcom/apollographql/java/client/ApolloClient$Builder;
	public synthetic fun enableAutoPersistedQueries (Ljava/lang/Boolean;)Ljava/lang/Object;
	public fun getCanBeBatched ()Ljava/lang/Boolean;
	public fun getEnableAutoPersistedQueries ()Ljava/lang/Boolean;
	public fun getExecutionContext ()Lcom/apollographql/apollo/api/ExecutionContext;
	public fun getHttpHeaders ()Ljava/util/List;
	public fun getHttpMethod ()Lcom/apollographql/apollo/api/http/HttpMethod;
	public fun getSendApqExtensions ()Ljava/lang/Boolean;
	public fun getSendDocument ()Ljava/lang/Boolean;
	public fun httpBatching (JIZ)Lcom/apollographql/java/client/ApolloClient$Builder;
	public fun httpEngine (Lcom/apollographql/java/client/network/http/HttpEngine;)Lcom/apollographql/java/client/ApolloClient$Builder;
	public fun httpExposeErrorBody (Z)Lcom/apollographql/java/client/ApolloClient$Builder;
	public fun httpHeaders (Ljava/util/List;)Lcom/apollographql/java/client/ApolloClient$Builder;
	public synthetic fun httpHeaders (Ljava/util/List;)Ljava/lang/Object;
	public fun httpInterceptors (Ljava/util/List;)Lcom/apollographql/java/client/ApolloClient$Builder;
	public fun httpMethod (Lcom/apollographql/apollo/api/http/HttpMethod;)Lcom/apollographql/java/client/ApolloClient$Builder;
	public synthetic fun httpMethod (Lcom/apollographql/apollo/api/http/HttpMethod;)Ljava/lang/Object;
	public fun httpServerUrl (Ljava/lang/String;)Lcom/apollographql/java/client/ApolloClient$Builder;
	public fun interceptors (Ljava/util/List;)Lcom/apollographql/java/client/ApolloClient$Builder;
	public fun networkTransport (Lcom/apollographql/java/client/network/NetworkTransport;)Lcom/apollographql/java/client/ApolloClient$Builder;
	public fun okHttpClient (Lokhttp3/OkHttpClient;)Lcom/apollographql/java/client/ApolloClient$Builder;
	public fun retryOnError (Lcom/apollographql/java/client/ApolloClient$RetryOnError;)Lcom/apollographql/java/client/ApolloClient$Builder;
	public fun sendApqExtensions (Ljava/lang/Boolean;)Lcom/apollographql/java/client/ApolloClient$Builder;
	public synthetic fun sendApqExtensions (Ljava/lang/Boolean;)Ljava/lang/Object;
	public fun sendDocument (Ljava/lang/Boolean;)Lcom/apollographql/java/client/ApolloClient$Builder;
	public synthetic fun sendDocument (Ljava/lang/Boolean;)Ljava/lang/Object;
	public fun serverUrl (Ljava/lang/String;)Lcom/apollographql/java/client/ApolloClient$Builder;
	public fun subscriptionNetworkTransport (Lcom/apollographql/java/client/network/NetworkTransport;)Lcom/apollographql/java/client/ApolloClient$Builder;
	public fun webSocketFactory (Lokhttp3/WebSocket$Factory;)Lcom/apollographql/java/client/ApolloClient$Builder;
	public fun webSocketServerUrl (Ljava/lang/String;)Lcom/apollographql/java/client/ApolloClient$Builder;
	public fun wsHeaders (Ljava/util/List;)Lcom/apollographql/java/client/ApolloClient$Builder;
	public fun wsIdleTimeoutMillis (J)Lcom/apollographql/java/client/ApolloClient$Builder;
	public fun wsProtocolFactory (Lcom/apollographql/java/client/network/ws/protocol/WsProtocol$Factory;)Lcom/apollographql/java/client/ApolloClient$Builder;
	public fun wsReopenWhen (Lcom/apollographql/java/client/network/ws/WebSocketNetworkTransport$ReopenWhen;)Lcom/apollographql/java/client/ApolloClient$Builder;
}

public abstract interface class com/apollographql/java/client/ApolloDisposable {
	public abstract fun addListener (Lcom/apollographql/java/client/ApolloDisposable$Listener;)V
	public abstract fun dispose ()V
	public abstract fun isDisposed ()Z
	public abstract fun removeListener (Lcom/apollographql/java/client/ApolloDisposable$Listener;)V
}

public abstract interface class com/apollographql/java/client/ApolloDisposable$Listener {
	public abstract fun onDisposed ()V
}

public final class com/apollographql/java/client/VersionKt {
	public static final field VERSION Ljava/lang/String;
}

public abstract interface class com/apollographql/java/client/interceptor/ApolloInterceptor {
	public abstract fun intercept (Lcom/apollographql/apollo/api/ApolloRequest;Lcom/apollographql/java/client/interceptor/ApolloInterceptorChain;Lcom/apollographql/java/client/ApolloCallback;)V
}

public abstract interface class com/apollographql/java/client/interceptor/ApolloInterceptorChain {
	public abstract fun getDisposable ()Lcom/apollographql/java/client/ApolloDisposable;
	public abstract fun proceed (Lcom/apollographql/apollo/api/ApolloRequest;Lcom/apollographql/java/client/ApolloCallback;)V
}

public class com/apollographql/java/client/interceptor/internal/AutoPersistedQueryInterceptor : com/apollographql/java/client/interceptor/ApolloInterceptor {
	public fun <init> (Lcom/apollographql/apollo/api/http/HttpMethod;Lcom/apollographql/apollo/api/http/HttpMethod;)V
	public fun intercept (Lcom/apollographql/apollo/api/ApolloRequest;Lcom/apollographql/java/client/interceptor/ApolloInterceptorChain;Lcom/apollographql/java/client/ApolloCallback;)V
}

public class com/apollographql/java/client/interceptor/internal/DefaultInterceptorChain : com/apollographql/java/client/interceptor/ApolloInterceptorChain {
	public fun <init> (Ljava/util/ArrayList;ILcom/apollographql/java/client/internal/DefaultApolloDisposable;)V
	public fun getDisposable ()Lcom/apollographql/java/client/ApolloDisposable;
	public fun proceed (Lcom/apollographql/apollo/api/ApolloRequest;Lcom/apollographql/java/client/ApolloCallback;)V
}

public class com/apollographql/java/client/internal/Assertions {
	public fun <init> ()V
	public static fun checkNotNull (Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;
}

public class com/apollographql/java/client/internal/DefaultApolloCall : com/apollographql/java/client/ApolloCall {
	public fun <init> (Lcom/apollographql/java/client/ApolloClient;Lcom/apollographql/apollo/api/Operation;)V
	public fun addExecutionContext (Lcom/apollographql/apollo/api/ExecutionContext;)Lcom/apollographql/java/client/ApolloCall;
	public synthetic fun addExecutionContext (Lcom/apollographql/apollo/api/ExecutionContext;)Ljava/lang/Object;
	public fun addHttpHeader (Ljava/lang/String;Ljava/lang/String;)Lcom/apollographql/java/client/ApolloCall;
	public synthetic fun addHttpHeader (Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;
	public fun canBeBatched (Ljava/lang/Boolean;)Lcom/apollographql/java/client/ApolloCall;
	public synthetic fun canBeBatched (Ljava/lang/Boolean;)Ljava/lang/Object;
	public fun enableAutoPersistedQueries (Ljava/lang/Boolean;)Lcom/apollographql/java/client/ApolloCall;
	public synthetic fun enableAutoPersistedQueries (Ljava/lang/Boolean;)Ljava/lang/Object;
	public fun enqueue (Lcom/apollographql/java/client/ApolloCallback;)Lcom/apollographql/java/client/ApolloDisposable;
	public fun getCanBeBatched ()Ljava/lang/Boolean;
	public fun getEnableAutoPersistedQueries ()Ljava/lang/Boolean;
	public fun getExecutionContext ()Lcom/apollographql/apollo/api/ExecutionContext;
	public fun getHttpHeaders ()Ljava/util/List;
	public fun getHttpMethod ()Lcom/apollographql/apollo/api/http/HttpMethod;
	public fun getRetryOnError ()Ljava/lang/Boolean;
	public fun getSendApqExtensions ()Ljava/lang/Boolean;
	public fun getSendDocument ()Ljava/lang/Boolean;
	public fun httpHeaders (Ljava/util/List;)Lcom/apollographql/java/client/ApolloCall;
	public synthetic fun httpHeaders (Ljava/util/List;)Ljava/lang/Object;
	public fun httpMethod (Lcom/apollographql/apollo/api/http/HttpMethod;)Lcom/apollographql/java/client/ApolloCall;
	public synthetic fun httpMethod (Lcom/apollographql/apollo/api/http/HttpMethod;)Ljava/lang/Object;
	public fun retryOnError (Ljava/lang/Boolean;)Lcom/apollographql/java/client/ApolloCall;
	public fun sendApqExtensions (Ljava/lang/Boolean;)Lcom/apollographql/java/client/ApolloCall;
	public synthetic fun sendApqExtensions (Ljava/lang/Boolean;)Ljava/lang/Object;
	public fun sendDocument (Ljava/lang/Boolean;)Lcom/apollographql/java/client/ApolloCall;
	public synthetic fun sendDocument (Ljava/lang/Boolean;)Ljava/lang/Object;
}

public class com/apollographql/java/client/internal/DefaultApolloDisposable : com/apollographql/java/client/ApolloDisposable {
	public fun <init> ()V
	public fun addListener (Lcom/apollographql/java/client/ApolloDisposable$Listener;)V
	public fun dispose ()V
	public fun isDisposed ()Z
	public fun removeListener (Lcom/apollographql/java/client/ApolloDisposable$Listener;)V
}

public abstract interface class com/apollographql/java/client/network/NetworkTransport {
	public abstract fun dispose ()V
	public abstract fun execute (Lcom/apollographql/apollo/api/ApolloRequest;Lcom/apollographql/java/client/ApolloCallback;Lcom/apollographql/java/client/ApolloDisposable;)V
}

public abstract interface class com/apollographql/java/client/network/http/HttpCallback {
	public abstract fun onFailure (Lcom/apollographql/apollo/exception/ApolloNetworkException;)V
	public abstract fun onResponse (Lcom/apollographql/apollo/api/http/HttpResponse;)V
}

public abstract interface class com/apollographql/java/client/network/http/HttpEngine {
	public abstract fun dispose ()V
	public abstract fun execute (Lcom/apollographql/apollo/api/http/HttpRequest;Lcom/apollographql/java/client/network/http/HttpCallback;Lcom/apollographql/java/client/ApolloDisposable;)V
}

public abstract interface class com/apollographql/java/client/network/http/HttpInterceptor {
	public abstract fun intercept (Lcom/apollographql/apollo/api/http/HttpRequest;Lcom/apollographql/java/client/network/http/HttpInterceptorChain;Lcom/apollographql/java/client/network/http/HttpCallback;)V
}

public abstract interface class com/apollographql/java/client/network/http/HttpInterceptorChain {
	public abstract fun proceed (Lcom/apollographql/apollo/api/http/HttpRequest;Lcom/apollographql/java/client/network/http/HttpCallback;)V
}

public class com/apollographql/java/client/network/http/HttpNetworkTransport : com/apollographql/java/client/network/NetworkTransport {
	public fun <init> (Lcom/apollographql/apollo/api/http/HttpRequestComposer;Lcom/apollographql/java/client/network/http/HttpEngine;Ljava/util/List;Z)V
	public fun dispose ()V
	public fun execute (Lcom/apollographql/apollo/api/ApolloRequest;Lcom/apollographql/java/client/ApolloCallback;Lcom/apollographql/java/client/ApolloDisposable;)V
}

public class com/apollographql/java/client/network/http/internal/BatchingHttpInterceptor : com/apollographql/java/client/network/http/HttpInterceptor {
	public fun <init> (JIZ)V
	public fun intercept (Lcom/apollographql/apollo/api/http/HttpRequest;Lcom/apollographql/java/client/network/http/HttpInterceptorChain;Lcom/apollographql/java/client/network/http/HttpCallback;)V
}

public class com/apollographql/java/client/network/http/internal/DefaultHttpInterceptorChain : com/apollographql/java/client/network/http/HttpInterceptorChain {
	public fun <init> (Ljava/util/List;I)V
	public fun proceed (Lcom/apollographql/apollo/api/http/HttpRequest;Lcom/apollographql/java/client/network/http/HttpCallback;)V
}

public class com/apollographql/java/client/network/http/internal/OkHttpHttpEngine : com/apollographql/java/client/network/http/HttpEngine {
	public fun <init> (JJ)V
	public fun <init> (Lokhttp3/Call$Factory;)V
	public fun dispose ()V
	public fun execute (Lcom/apollographql/apollo/api/http/HttpRequest;Lcom/apollographql/java/client/network/http/HttpCallback;Lcom/apollographql/java/client/ApolloDisposable;)V
}

public class com/apollographql/java/client/network/ws/WebSocketConnection {
	public fun <init> (Lokhttp3/WebSocket$Factory;Ljava/lang/String;Ljava/util/List;)V
	public fun close ()V
	public fun isOpen ()Z
	public fun open ()V
	public fun receive (J)Ljava/lang/String;
	public fun send (Ljava/lang/String;)V
	public fun send (Lokio/ByteString;)V
}

public class com/apollographql/java/client/network/ws/WebSocketNetworkTransport : com/apollographql/java/client/network/NetworkTransport {
	public fun <init> (Lokhttp3/WebSocket$Factory;Lcom/apollographql/java/client/network/ws/protocol/WsProtocol$Factory;Ljava/lang/String;Ljava/util/List;Lcom/apollographql/java/client/network/ws/WebSocketNetworkTransport$ReopenWhen;Ljava/util/concurrent/Executor;J)V
	public fun dispose ()V
	public fun execute (Lcom/apollographql/apollo/api/ApolloRequest;Lcom/apollographql/java/client/ApolloCallback;Lcom/apollographql/java/client/ApolloDisposable;)V
}

public abstract interface class com/apollographql/java/client/network/ws/WebSocketNetworkTransport$ReopenWhen {
	public abstract fun reopenWhen (Ljava/lang/Throwable;J)Z
}

public class com/apollographql/java/client/network/ws/protocol/ApolloWsProtocol : com/apollographql/java/client/network/ws/protocol/WsProtocol {
	public fun <init> (Lcom/apollographql/java/client/network/ws/WebSocketConnection;Lcom/apollographql/java/client/network/ws/protocol/WsProtocol$Listener;Ljava/util/function/Supplier;Lcom/apollographql/java/client/network/ws/protocol/WsProtocol$WsFrameType;)V
	public fun connectionInit ()V
	public fun handleServerMessage (Ljava/util/Map;)V
	public fun startOperation (Lcom/apollographql/apollo/api/ApolloRequest;)V
	public fun stopOperation (Lcom/apollographql/apollo/api/ApolloRequest;)V
}

public class com/apollographql/java/client/network/ws/protocol/ApolloWsProtocol$Factory : com/apollographql/java/client/network/ws/protocol/WsProtocol$Factory {
	public fun <init> ()V
	public fun <init> (Ljava/util/function/Supplier;)V
	public fun <init> (Ljava/util/function/Supplier;Lcom/apollographql/java/client/network/ws/protocol/WsProtocol$WsFrameType;)V
	public fun create (Lcom/apollographql/java/client/network/ws/WebSocketConnection;Lcom/apollographql/java/client/network/ws/protocol/WsProtocol$Listener;)Lcom/apollographql/java/client/network/ws/protocol/WsProtocol;
	public fun getName ()Ljava/lang/String;
}

public class com/apollographql/java/client/network/ws/protocol/AppSyncWsProtocol : com/apollographql/java/client/network/ws/protocol/WsProtocol {
	public fun <init> (Lcom/apollographql/java/client/network/ws/WebSocketConnection;Lcom/apollographql/java/client/network/ws/protocol/WsProtocol$Listener;Ljava/util/Map;J)V
	public static fun buildUrl (Ljava/lang/String;Ljava/util/Map;Ljava/util/Map;)Ljava/lang/String;
	public fun connectionInit ()V
	public fun handleServerMessage (Ljava/util/Map;)V
	public fun startOperation (Lcom/apollographql/apollo/api/ApolloRequest;)V
	public fun stopOperation (Lcom/apollographql/apollo/api/ApolloRequest;)V
}

public class com/apollographql/java/client/network/ws/protocol/AppSyncWsProtocol$Factory : com/apollographql/java/client/network/ws/protocol/WsProtocol$Factory {
	public fun <init> (Ljava/util/Map;)V
	public fun <init> (Ljava/util/Map;J)V
	public fun create (Lcom/apollographql/java/client/network/ws/WebSocketConnection;Lcom/apollographql/java/client/network/ws/protocol/WsProtocol$Listener;)Lcom/apollographql/java/client/network/ws/protocol/WsProtocol;
	public fun getName ()Ljava/lang/String;
}

public class com/apollographql/java/client/network/ws/protocol/GraphQLWsProtocol : com/apollographql/java/client/network/ws/protocol/WsProtocol {
	public fun <init> (Lcom/apollographql/java/client/network/ws/WebSocketConnection;Lcom/apollographql/java/client/network/ws/protocol/WsProtocol$Listener;Ljava/util/function/Supplier;Lcom/apollographql/java/client/network/ws/protocol/WsProtocol$WsFrameType;Ljava/util/Map;Ljava/util/Map;JJ)V
	public fun connectionInit ()V
	public fun handleServerMessage (Ljava/util/Map;)V
	public fun run ()V
	public fun startOperation (Lcom/apollographql/apollo/api/ApolloRequest;)V
	public fun stopOperation (Lcom/apollographql/apollo/api/ApolloRequest;)V
}

public class com/apollographql/java/client/network/ws/protocol/GraphQLWsProtocol$Factory : com/apollographql/java/client/network/ws/protocol/WsProtocol$Factory {
	public fun <init> ()V
	public fun <init> (Ljava/util/function/Supplier;Lcom/apollographql/java/client/network/ws/protocol/WsProtocol$WsFrameType;Ljava/util/Map;Ljava/util/Map;JJ)V
	public fun create (Lcom/apollographql/java/client/network/ws/WebSocketConnection;Lcom/apollographql/java/client/network/ws/protocol/WsProtocol$Listener;)Lcom/apollographql/java/client/network/ws/protocol/WsProtocol;
	public fun getName ()Ljava/lang/String;
}

public abstract class com/apollographql/java/client/network/ws/protocol/WsProtocol {
	protected field listener Lcom/apollographql/java/client/network/ws/protocol/WsProtocol$Listener;
	protected field webSocketConnection Lcom/apollographql/java/client/network/ws/WebSocketConnection;
	public fun <init> (Lcom/apollographql/java/client/network/ws/WebSocketConnection;Lcom/apollographql/java/client/network/ws/protocol/WsProtocol$Listener;)V
	public fun close ()V
	public abstract fun connectionInit ()V
	public abstract fun handleServerMessage (Ljava/util/Map;)V
	protected fun receiveMessageMap (J)Ljava/util/Map;
	public fun run ()V
	protected fun sendMessageMap (Ljava/util/Map;Lcom/apollographql/java/client/network/ws/protocol/WsProtocol$WsFrameType;)V
	protected fun sendMessageMapBinary (Ljava/util/Map;)V
	protected fun sendMessageMapText (Ljava/util/Map;)V
	public abstract fun startOperation (Lcom/apollographql/apollo/api/ApolloRequest;)V
	public abstract fun stopOperation (Lcom/apollographql/apollo/api/ApolloRequest;)V
	protected static fun toJsonByteString (Ljava/util/Map;)Lokio/ByteString;
	protected static fun toJsonString (Ljava/util/Map;)Ljava/lang/String;
}

public abstract interface class com/apollographql/java/client/network/ws/protocol/WsProtocol$Factory {
	public abstract fun create (Lcom/apollographql/java/client/network/ws/WebSocketConnection;Lcom/apollographql/java/client/network/ws/protocol/WsProtocol$Listener;)Lcom/apollographql/java/client/network/ws/protocol/WsProtocol;
	public abstract fun getName ()Ljava/lang/String;
}

public abstract interface class com/apollographql/java/client/network/ws/protocol/WsProtocol$Listener {
	public abstract fun generalError (Ljava/util/Map;)V
	public abstract fun networkError (Ljava/lang/Throwable;)V
	public abstract fun operationComplete (Ljava/lang/String;)V
	public abstract fun operationError (Ljava/lang/String;Ljava/util/Map;)V
	public abstract fun operationResponse (Ljava/lang/String;Ljava/util/Map;)V
}

public final class com/apollographql/java/client/network/ws/protocol/WsProtocol$WsFrameType : java/lang/Enum {
	public static final field Binary Lcom/apollographql/java/client/network/ws/protocol/WsProtocol$WsFrameType;
	public static final field Text Lcom/apollographql/java/client/network/ws/protocol/WsProtocol$WsFrameType;
	public static fun valueOf (Ljava/lang/String;)Lcom/apollographql/java/client/network/ws/protocol/WsProtocol$WsFrameType;
	public static fun values ()[Lcom/apollographql/java/client/network/ws/protocol/WsProtocol$WsFrameType;
}

